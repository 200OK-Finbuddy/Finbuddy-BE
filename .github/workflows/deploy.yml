name: Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest # 작업이 실행될 환경
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set Up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Add Execute Permission to Gradle Wrapper
        run: chmod +x gradlew
      - name: Build with Gradle (CI)
        run: ./gradlew build -x test
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_USER_PW }}
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be .
      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be
      - name: Deploy to AWS EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_IP }}
          port: 22
          username: ubuntu
          key: ${{ secrets.AWS_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be
            
            cat <<EOF > docker-compose.override.yml
            services:
              backend:
                container_name: backend
                environment:
                  - DB_URL=${{ secrets.DB_URL }}
                  - DB_USERNAME=${{ secrets.DB_USERNAME }}
                  - DB_PASSWORD=${{ secrets.DB_PASSWORD }}
                  - BANK_API_KEY=${{ secrets.BANK_API_KEY }}
                  - SMTP_EMAIL=${{ secrets.SMTP_EMAIL }}
                  - SMTP_APPPASSWORD=${{ secrets.SMTP_APPPASSWORD }}
                  - JWT_ACCESS_SECRETKEY=${{ secrets.JWT_ACCESS_SECRETKEY }}
                  - JWT_REFRESH_SECRETKEY=${{ secrets.JWT_REFRESH_SECRETKEY }}
                  - VIRTUAL_HOST=${{ secrets.DOMAIN }}
                  - VIRTUAL_PORT=8080
            
              frontend:
                environment:
                  - VIRTUAL_HOST=${{ secrets.DOMAIN }}
                  - LETSENCRYPT_HOST=${{ secrets.DOMAIN }}
                  - LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
                  - VIRTUAL_PORT=80

              proxy:
                image: jwilder/nginx-proxy
                container_name: nginx-proxy
                ports:
                  - "80:80"
                  - "443:443"
                networks:
                  - network
                volumes:
                  - /var/run/docker.sock:/tmp/docker.sock:ro
                  - ./certs:/etc/nginx/certs
                  - ./vhost.d:/etc/nginx/vhost.d
                  - ./html:/usr/share/nginx/html

              letsencrypt:
                image: jrcs/letsencrypt-nginx-proxy-companion
                container_name: letsencrypt
                environment:
                  - NGINX_PROXY_CONTAINER=nginx-proxy
                  - DEFAULT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
                networks:
                  - network
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock:ro
                  - ./certs:/etc/nginx/certs
                  - ./vhost.d:/etc/nginx/vhost.d
                  - ./html:/usr/share/nginx/html
            
            EOF
            
            docker-compose up -d